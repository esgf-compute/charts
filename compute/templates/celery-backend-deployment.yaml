apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "compute.celery.fullname" . }}-backend
  labels:
    {{- include "compute.celery.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.celery.backend.replicas }}
  selector:
    matchLabels:
    {{- include "compute.celery.matchLabels" . | nindent 6 }}
      component/part: backend
  template:
    metadata:
      labels:
      {{- include "compute.celery.matchLabels" . | nindent 8 }}
        component/part: backend
      annotations:
        checksum/config: {{ include (print .Template.BasePath "/celery-backend-configmap.yaml") . | sha256sum }}
    spec:
      {{- if .Values.celery.nodeSelector }}
      nodeSelector: 
      {{ .Values.celery.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{ .Values.imagePullSecrets | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
      - name: register
        image: {{ .Values.celery.image }}:{{ .Values.celery.imageTag }}
        imagePullPolicy: {{ .Values.celery.imagePullPolicy }}
        command:
          - tini
          - --
        args:
          - /bin/bash
          - -c
          - "mkdir -p /metrics; until nslookup ${INTERNAL_LB}; do echo 'Waiting'; done; compute-tasks-register"
        resources:
        {{ .Values.celery.backend.resources | toYaml | nindent 10 }}
        envFrom:
        - configMapRef:
            name: {{ template "compute.celery.fullname" . }}-backend
      containers:
      - name: backend
        image: {{ .Values.celery.image }}:{{ .Values.celery.imageTag }}
        imagePullPolicy: {{ .Values.celery.imagePullPolicy }}
        command:
          - tini
          - --
        args:
          - /bin/bash
          - -c
          - "mkdir -p /metrics && compute-tasks-backend --queue-host ${PROVISIONER_BACKEND}"
        resources:
        {{ .Values.celery.backend.resources | toYaml | nindent 10 }}
        envFrom:
        - configMapRef:
            name: {{ template "compute.celery.fullname" . }}-backend
        env:
          - name: WORKERS
            value: {{ .Values.userResources.workers | quote }}
          - name: USER_LIMIT_CPU
            value: {{ .Values.userResources.limit.cpu | quote }}
          - name: USER_LIMIT_MEMORY
            value: {{ .Values.userResources.limit.memory | quote }}
          - name: USER_REQUEST_CPU
            value: {{ .Values.userResources.request.cpu | quote }}
          - name: USER_REQUEST_MEMORY
            value: {{ .Values.userResources.request.memory | quote }}
        volumeMounts:
        - mountPath: /metrics
          name: metrics-volume
      volumes:
      - name: metrics-volume
        emptyDir: {}
