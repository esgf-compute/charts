apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "esgf-compute-wps.fullname" $ }}-celery-worker
  labels:
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/name: {{ template "esgf-compute-wps.name" $ }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
spec:
  replicas: {{ $.Values.celery.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "esgf-compute-wps.name" $ }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
      app.kubernetes.io/component: celery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "esgf-compute-wps.name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/component: celery
      annotations:
        checksum/config: {{ list (include (print $.Template.BasePath "/wps-secret.yaml") $) (include (print $.Template.BasePath "/celery-backend-configmap.yaml") $) | join " " | sha256sum }}
      {{- if $.Values.celery.annotations }}
        {{- $.Values.celery.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
      {{- end }}
    spec:
      {{- if $.Values.celery.nodeSelector }}
      nodeSelector: 
        {{ $.Values.celery.nodeSelector | toYaml | trimSuffix "\n" }}
      {{- end }}
      {{- if $.Values.celery.imagePullSecret }}
      imagePullSecrets:
      - name: {{ $.Values.celery.imagePullSecret }}
      {{- end }}
      containers:
      - name: {{ template "esgf-compute-wps.name" $ }}-celery-worker-metrics
        image: {{ $.Values.celery.image }}:{{ $.Values.celery.imageTag }}
        imagePullPolicy: {{ $.Values.celery.imagePullPolicy }}
        ports:
        - containerPort: {{ $.Values.celery.metrics.service.port }}
          protocol: TCP
        command:
          - tini
          - --
        args:
          - /bin/bash
          - -c
          - "mkdir -p /metrics && compute-tasks-metrics"
        resources:
          {{ $.Values.celery.metrics.resources | toYaml | trimSuffix "\n" | nindent 10 }}
      - name: {{ template "esgf-compute-wps.name" $ }}-celery-worker
        image: {{ $.Values.celery.image }}:{{ $.Values.celery.imageTag }}
        imagePullPolicy: {{ $.Values.celery.imagePullPolicy }}
        command: ["tini", "--"]
        args: 
          - /bin/bash
          - entrypoint.sh
          - "-c"
          - "1"
          - "-Q"
          - "ingress"
          - "-l"
          - "DEBUG"
          - "--max-tasks-per-child"
          - "1"
        livenessProbe:
          exec:
            command:
            - bash
            - /healthcheck.sh
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - bash
            - /healthcheck.sh
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        resources: 
        {{ $.Values.celery.resources | toYaml | trimSuffix "\n" | nindent 10 }}
        env:
        {{- if $.Values.celery.development }}
        - name: DEV
          value: "1"
        - name: WPS_DEBUG
          value: "1"
        {{- end }}
        - name: PROMETHEUS_HOST
          value: {{ required "Set celery.prometheusUrl" $.Values.celery.prometheusUrl }}
        envFrom:
        - secretRef:
            name: {{ template "esgf-compute-wps.fullname" $ }}-wps-secret
        - configMapRef:
            name: {{ template "esgf-compute-wps.fullname" $ }}-celery-backend-config
        volumeMounts:
        - mountPath: /metrics
          name: metrics-volume
        - mountPath: /data/public
          name: data-volume
      volumes:
      - name: metrics-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ $.Values.persistence.dataClaimName | default "data-pvc" }}
