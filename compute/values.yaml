metrics:
  serviceMonitor:
    enabled: false
    labels: {}

persistence:
  existingClaim:
  storageClassName:
  size: 8Gi

imagePullSecrets: []
# - name: docker-registry

# User resources
# 
# Per worker allocation is calculate as follows
# worker cpu and memory = (total - scheduler) / instances
userResources:
  # Total resources allocated for a single user
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 2
      memory: 2Gi

  scheduler:
    resources:
      limits:
        cpu: 1
        memory: 512Mi

  worker:
    nThreads: 2
    instances: 2

baseUrl: http://127.0.0.1
threddsUrl: http://127.0.0.1/threddsCWT/dodsC/public

# Provisioner
provisioner:
  name: provisioner
  nodeSelector: {}
  image: nimbus2.llnl.gov/public/compute-provisioner
  imageTag: 2.3.0
  imagePullPolicy: IfNotPresent

  timeout: 60
  lifetime: 240

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 128Mi
    # request:
    #   cpu: 100m
    #   memory: 32Mi

wps:
  name: wps
  nodeSelector: {}
  replicas: 1
  image: nimbus2.llnl.gov/public/compute-wps
  imageTag: 2.3.2
  imagePullPolicy: IfNotPresent

  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 200m
    #   memory: 256Mi

  auth:
    type: noauth
    traefik:
    keycloak:
      url: 
      realm:
      clientID:
      clientSecret:
      regAccessToken:

  allowedHosts:
    - "*"

  # Configure the values that will be used in creating WPS responses
  title: LLNL WPS Server
  abstract: LLNL WPS Compute Service
  keywords:
  - WPS

  provider:
    name: ESGF
    site: https://esgf.llnl.gov

  contact:
    name:
    position:
    phone:

  address:
    delivery:
    city:
    area:
    postal:
    counter:
    email:

  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: /api/metrics/
    prometheus.io/port: '8000'

  email:
    host: user@wps.local
    port: 25
    user: ''
    password: ''

  ingress:
    enabled: false
    annotations: {}
    labels: {}

backend:
  name: backend
  replicas: 1
  annotations: {}
  nodeSelector: {}
  image: nimbus2.llnl.gov/public/compute-tasks
  imageTag: 2.3.1
  imagePullPolicy: IfNotPresent

  prometheusUrl: prometheus.host

  auth:
    enabled: false
    clientID:
    clientSecret:
    tokenUrl:
  
  # Provides mapping for local data
  # mounts and the mapping will be available to a compute backend to translate urls to local data paths.
  localMapping: {}
  #   mounts:
  #     - path: /data
  #       type: hostpath
  #   mapping:
  #     test: /data/test

  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 2Gi
    # requests:
    #   cpu: 500m
    #   memory: 1Gi
    
  worker:
    replicas: 1

    resources: {}
      # limits:
      #   cpu: 1
      #   memory: 2Gi
      # requests:
      #   cpu: 500m
      #   memory: 1Gi

  metrics:
    resources: {}
      # limits:
      #   cpu: 1
      #   memory: 2Gi
      # requests:
      #   cpu: 500m
      #   memory: 1Gi

    service:
      port: 8080

      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: /metrics
        prometheus.io/port: '8080'

thredds:
  name: thredds
  nodeSelector: {}
  replicas: 1
  image: nimbus2.llnl.gov/public/compute-thredds
  imageTag: 2.3.1
  imagePullPolicy: IfNotPresent

  # Set java parameters for tomcat server
  heapMax: 1g
  heapInit: 512m

  resources: {}
    # limits:
    #   cpu: 1
    #   memory: 2Gi
    # requests:
    #   cpu: 500m
    #   memory: 512Mi

  ingress:
    enabled: false
    annotations: {}
    labels: {}

postgresql:
  postgresqlPassword: postgres-abcd1234

  persistence:
    enabled: false

redis-cluster:
  usePassword: false
  
  persistence:
    enabled: false

prometheus-pushgateway:
  serviceMonitor:
    enabled: false
    namespace: default
    additionalLabels:
      prometheus.io: default
