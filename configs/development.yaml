# Disables health/readiness checks and persistent storage.
development: true

persistence:
  dataClaimName: data-dev-pvc

  volumes:
    data-dev:
      storageClassName: slow
      capacity: 100Gi
      path: /p/cscratch/nimbus/wps-dev/data

provisioner:
  # Sets provisioner container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=provisioner --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # compute-provisioner
  #
  development: false

  image: aims2.llnl.gov/compute-provisioner
  imageTag: 649afa14
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  workers: 2

  timeout: 60

  lifetime: 240

nginx:
  # Sets the nginx container to development mode
  # 
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=nginx --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  #
  development: false

  image: aims2.llnl.gov/compute-webapp
  imageTag: 2464dcf7
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  ingress:
    labels:
      traffic-type: development

wps:
  # Sets the wps container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=wps --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME /bin/bash
  # bash entrypoint.sh
  # 
  development: false

  image: aims2.llnl.gov/compute-wps
  imageTag: 5ab9bca1
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  beat:
    enabled: true
    development: false

    # Days until a job expires
    # 30 Minute expire
    jobExpiration: 0.0208333333333333
    # Days before expiration to warn
    # 15 Minute warn
    jobWarn: 0.0104166666666667

    # Every 5 minutes we'll scan
    crontabHour: '*'
    crontabMinute: '*/5'

  externalHost: 10.5.5.5:8443

  oauth:
    client: dasda
    secret: dadas

  apiUsername: wps_api_user
  apiPassword: changeit

  adminEmail: dasda

  email:
    host: dadagfa

  ingress:
    external:
      labels:
        traffic-type: development
    internal:
      labels:
        traffic-type: development

celery:
  # Sets the celery container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME -c compute-celery-ingress /bin/bash
  # bash entrypoint.sh -c 1 -Q ingress -n ingress -l INFO
  # 
  development: false

  image: aims2.llnl.gov/compute-celery
  imageTag: 649afa14
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  prometheusUrl: adsadas

  backend:
  #   Sets the celery backend container to development mode
  #
  # POD_NAME=$(kubectl get pods --selector  app.kubernetes.io/component=celery --template "{{range .items}}{{.metadata.name}}{{end}}")
  # kubectl exec -it $POD_NAME -c compute-celery-ingress-backend /bin/bash
  # compute-tasks-backend
  #
    development: false

thredds:
  image: aims2.llnl.gov/compute-thredds
  imageTag: 87d189e1
  imagePullPolicy: Always
  imagePullSecret: docker-registry-config-aims2

  ingress:
    labels:
      traffic-type: development

redis:
  master:
    persistence:
      enabled: false

postgresql:
  postgresqlPassword: abcd1234

  persistence:
    enabled: false

twitcher:
  ingress:
    labels:
      traffic-type: development
